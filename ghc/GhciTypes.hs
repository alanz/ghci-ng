-- | Types used separate to GHCi vanilla.

module GhciTypes where

import Control.Concurrent.STM
import Data.ByteString (ByteString)
import Data.Map (Map)
import GHC

--------------------------------------------------------------------------------
-- Project state
-- $state
--
-- All state is stored in one pure value which has 'TVar' slots. It is
-- passed to all command handlers as a reader value. The value itself
-- should never change for a given instance of ghc-server.

-- | Project-wide state.
data State =
  State {stateModuleInfos :: !(TVar (Map ModuleName ModInfo))
         -- ^ A mapping from local module names to information about that
         -- module such as scope, types, exports, imports, etc.  Regenerated
         -- after every module reload.
        }

-- | Info about a module. This information is generated every time a
-- module is loaded.
data ModInfo =
  ModInfo {modinfoSummary :: !ModSummary
           -- ^ Summary generated by GHC. Can be used to access more
           -- information about the module.
          ,modinfoSpans :: ![SpanInfo]
           -- ^ Generated set of information about all spans in the
           -- module that correspond to some kind of identifier for
           -- which there will be type info and/or location info.
          ,modinfoInfo :: !ModuleInfo
           -- ^ Again, useful from GHC for accessing information
           -- (exports, instances, scope) from a module.
          }

-- | Type of some span of source code. Most of these fields are
-- unboxed but Haddock doesn't show that.
data SpanInfo =
  SpanInfo {spaninfoStartLine :: {-# UNPACK #-} !Int
            -- ^ Start line of the span.
           ,spaninfoStartCol :: {-# UNPACK #-} !Int
            -- ^ Start column of the span.
           ,spaninfoEndLine :: {-# UNPACK #-} !Int
            -- ^ End line of the span (absolute).
           ,spaninfoEndCol :: {-# UNPACK #-} !Int
            -- ^ End column of the span (absolute).
           ,spaninfoType :: {-# UNPACK #-} !ByteString
            -- ^ A pretty-printed representation fo the type.
           ,spaninfoVar :: !(Maybe Id)
            -- ^ The actual 'Var' associated with the span, if
            -- any. This can be useful for accessing a variety of
            -- information about the identifier such as module,
            -- locality, definition location, etc.
           }
